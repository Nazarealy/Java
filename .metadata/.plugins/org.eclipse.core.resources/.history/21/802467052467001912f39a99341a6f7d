package ua.lviv.iot.cutlery.managers;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import java.util.Collections;
import java.util.Comparator;

import ua.lviv.iot.cutlery.models.*;

public class CutleryManager {
	
	 private List<Cutlery> cutleryList = new ArrayList<>();
	 
	   public void toAdd(Cutlery cutlery){
	        cutleryList.add (cutlery);
	    }
	
	   public CutleryManager(){
	    }

	    public CutleryManager(List<Cutlery> cutleryList){
	        this.cutleryList= cutleryList;
	    }
	    
	    public List<Cutlery> sortByPrice(boolean ascending) {
	        if (ascending) {
	            Collections.sort(cutleryList, Comparator.comparing(Cutlery::getPrice).reversed());
	        } else {
	            Collections.sort(cutleryList, Comparator.comparing(Cutlery::getPrice));
	        }return cutleryList;
	    }

	    public List<Cutlery> sortByCapacity(boolean ascending) {
	        if (ascending) {
	            Collections.sort(cutleryList, Comparator.comparing(Cutlery::getRating).reversed());
	        } else {
	            Collections.sort(cutleryList, Comparator.comparing(Cutlery::getRating));
	        }return cutleryList;
	    }

	    public List<Cutlery> searchByRating(double rating) {
	        return cutleryList.stream().filter(vessel -> vessel.getRating() == rating).
	                collect(Collectors.toList());
	    }

	    public List<Cutlery> searchByStructure(String production) {
	        return cutleryList.stream().filter(vessel -> vessel.getProduction() == production).
	                collect(Collectors.toList());
	    }

}
